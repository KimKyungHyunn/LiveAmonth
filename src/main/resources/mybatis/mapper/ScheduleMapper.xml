<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.liveamonth.liveamonth.model.mapper.scheduleMapper.ScheduleMapper">
	<!-- select -->
	<select id="beforeScheduleAddSearch" parameterType="ScheduleContentVO" resultType="int">
		select count(*) from scheduleContent where scheduleContentDate = #{scheduleContentDate}
	</select>

	<select id="scheduleContentList" parameterType="HashMap" resultType="ScheduleContentVO">
		select * from scheduleContent where scheduleContent.scheduleNO = #{scheduleNO} AND scheduleContentDate &gt;= #{calendarDTO.dbStartDate} and scheduleContentDate &lt;= #{calendarDTO.dbEndDate} order by scheduleContentDate, scheduleContentNO
	</select>

	<select id="getLastScheduleContentNO" resultType="int">
		select max(scheduleContentNO) from scheduleContent;
	</select>


	<select id="getMaxScheduleNO" resultType="int">
		select max(scheduleNO) from schedule;
	</select>

	<select id="getScheduleList" resultType="ScheduleVO" parameterType="int">
		select * from schedule where userNO = #{userNO};
	</select>

<!-- 	<select id="findUserIDToUserNO" resultType="int" parameterType="String">
		select userNO from user where userID = #{userID};
	</select>
	 -->
	
<!-- 	 <select id="getOtherScheduleInfo" resultType="com.liveamonth.liveamonth.entity.vo.ScheduleVO">
      select * from schedule where schedule.scheduleStatus = true order by scheduleLikeCount DESC;
    </select> -->
    
<!--     <select id="getOtherScheduleList" parameterType="HashMap" resultType="com.liveamonth.liveamonth.entity.vo.ScheduleVO">
		select * from schedule	
		<where>
		<choose>
			<when test="filter!=null">
				AND schedule.scheduleStatus = true #{filter}
			</when>
			<otherwise>
				AND schedule.scheduleStatus = true
			</otherwise>
		</choose>
		</where>

	</select>  -->
	<resultMap type = "java.util.HashMap" id="scheduleFilterAndOrder">
		<id column="scheduleNO" property="scheduleNO"/>
		<result column="scheduleSubject" property="scheduleSubject"/>
		<result column="schedulePlace" property="schedulePlace"/>
		<result column="scheduleViewCount" property="scheduleViewCount"/>
		<association property="userVO" javaType="userVO">
			<id column="userNO" property="userNO"/>
			<result column="userNickname" property="userNickname"/>
			<result column="userAge" property="userAge"/>
			<result column="userSex" property="userSex"/>
		</association>
		<association property="scheduleLikeVO" javaType="scheduleLikeVO">
			<id column="scheduleNO" property="scheduleNO"/>
			<result column="scheduleLikeUserNO" property="scheduleLikeUserNO"/>
		</association>
	</resultMap>

 	<select id="getOtherScheduleList" parameterType="HashMap" resultType="scheduleFilterAndOrder">
		select userNickname, scheduleSubject,(Year(curdate())-user.userAge) as userAge,userSex,schedulePlace,scheduleViewCount,COUNT(scheduleLike.scheduleNO) as scheduleLikeCount
		from user, schedule, scheduleLike
		where user.userNO = schedule.userNO
		and schedule.scheduleNO = scheduleLike.scheduleNO
		<if test="!userAgeFilter">
			and Year(curdate())-user.userAge between #{userAge} and #{userAge}+9
		</if>
		<if test="!userSexFilter">
			and userSex = #{userSex}
		</if>
		<if test="!schedulePlaceFilter">
			and schedulePlace = #{schedulePlace}
		</if>
		GROUP BY schedule.scheduleNO
		<choose>
			<when test="orderBy == 'orderByView'">
				ORDER BY schedule.scheduleViewCount desc;
			</when>
			<when test="orderBy == 'orderByLiked'">
				ORDER BY COUNT(scheduleLike.scheduleNO) desc;
			</when>
			<when test="orderBy == 'orderByNew'">
				ORDER BY schedule.scheduleNO desc;
			</when>
			<otherwise>
				ORDER BY schedule.scheduleNO desc;
			</otherwise>
		</choose>
	</select>

	<resultMap type = "java.util.HashMap" id="scheduleReplyAndNickname">
		<id column="scheduleReplyNO" property="scheduleReplyNO"/>
		<result column="userNickname" property="userNickname"/>
		<association property="scheduleReply" javaType="ScheduleReplyVO">
			<id column="scheduleReplyNO" property="scheduleReplyNO"/>
			<result column="scheduleReplyDesc" property="scheduleReplyDesc"/>
			<result column="scheduleReplyDate" property="scheduleReplyDate"/>
			<result column="scheduleReplyRefNO" property="scheduleReplyRefNO"/>
			<result column="userNO" property="userNO"/>
			<result column="scheduleNO" property="scheduleNO"/>
		</association>
	</resultMap>

	<select id="getScheduleReplyList" parameterType="int" resultMap="scheduleReplyAndNickname">
		select scheduleReplyNO, scheduleReplyDesc, scheduleReplyDate, scheduleReplyRefNO, scheduleReply.userNO, scheduleNO, userNickname  from user, scheduleReply where scheduleReply.userNO = user.userNO AND scheduleReply.scheduleNO = #{scheduleNO};
	</select>

	<select id="getMaxScheduleReplyNO" resultType="int">
		select max(scheduleReplyNO) from scheduleReply;
	</select>

	<!-- delete -->
	<delete id="deleteScheduleContent" parameterType="int">
		delete from scheduleContent where scheduleContentNO = #{scheduleContentNO}
	</delete>
	
	<delete id="deleteSchedule" parameterType="int">
		delete from schedule where scheduleNO = #{scheduleNO}
	</delete>

	<delete id="deleteScheduleReply" parameterType="int">
		delete from scheduleReply where scheduleReplyNO = #{scheduleReplyNO}
	</delete>

	<!-- insert -->
	<insert id="addSchedule" parameterType="ScheduleVO">
		insert into schedule values(#{scheduleNO}, #{scheduleSubject},#{scheduleStatus},#{schedulePlace},#{scheduleViewCount},#{userNO})
	</insert>

	<insert id="addScheduleContent" parameterType="ScheduleContentVO">
		insert into scheduleContent values (#{scheduleContentNO}, #{scheduleContentSubject}, #{scheduleContentDesc}, #{scheduleContentDate}, #{scheduleContentCost}, #{scheduleNO})
	</insert>

	<insert id="addScheduleReplyVO" parameterType="ScheduleReplyVO">
		insert into scheduleReply values (#{scheduleReplyNO}, #{scheduleReplyDesc}, #{scheduleReplyDate},
		<choose>
			<when test = "scheduleReplyRefNO == 0">
				null
			</when>
			<otherwise>
				#{scheduleReplyRefNO}
			</otherwise>
		</choose>
		, #{userNO}, #{scheduleNO})
	</insert>

	<!-- update -->

	<update id="modifyScheduleContent" parameterType="ScheduleContentVO">
		update scheduleContent
		set scheduleContentSubject = #{scheduleContentSubject}, scheduleContentDesc = #{scheduleContentDesc},
		scheduleContentCost = #{scheduleContentCost}
		where scheduleContentNO = #{scheduleContentNO}
	</update>
	
	<update id="modifySchedule" parameterType="ScheduleVO">
		update schedule set scheduleSubject = #{scheduleSubject}, scheduleStatus = #{scheduleStatus}, schedulePlace = #{schedulePlace} where scheduleNO = #{scheduleNO}
	</update>
</mapper>